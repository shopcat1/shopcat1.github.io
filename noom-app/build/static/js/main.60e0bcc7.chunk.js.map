{"version":3,"sources":["Controller/Controller.ts","ComplexDonut/ComplexDonut.tsx","App.tsx","CustomValue/CustomValue.tsx","OffButton/OffButton.tsx","reportWebVitals.ts","index.tsx"],"names":["Controller","arg","fetch","method","body","JSON","stringify","then","r","console","log","catch","e","warn","rotateAngle","getPercent","value","total","size","DonutWedge","props","i","circleProps","radius","halfSize","segment","thickness","circumference","getStrokeDashOffset","textProps","selectedButton","setSelectedButton","className","onClick","label","createRequest","cx","cy","transform","rotate","stroke","color","strokeWidth","strokeDasharray","strokeDashoffset","x","textCoords","y","dy","textAnchor","ComplexDonut","segments","getTextCoordinates","angleOffset","radians","angle","Math","PI","convertDegreesToRadians","cos","sin","React","useState","setSegments","useEffect","rotations","startAngle","forEach","data","percent","push","result","length","getTransforms","map","width","getCircumference","scale","height","viewBox","fill","z","defaultProps","LoadingStatus","CustomValue","g","b","w","values","setValues","style","onChange","target","name","newValue","type","OffButton","getWindowDimensions","window","innerWidth","innerHeight","App","undefined","Loading","loadingStatus","setLoadingStatus","json","segs","Loaded","Error","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener","useWindowDimensions","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.60e0bcc7.chunk.js","sourcesContent":["export class Controller {\n    static createRequest(arg) {\n        fetch(\"https://api.particle.io/v1/devices/e00fce68873438d598031f19/led?access_token=1cf158060ec1b7c46ad748774002ef19ae1db657\", \n        {\n            method:\"POST\",   \n          body:JSON.stringify(arg)})\n          .then(r => console.log(\"Updated\", r) )\n          .catch(e => { console.warn(\"Error Updating\", e);\n          })\n        }\n}","import React from 'react';\nimport { Controller } from '../Controller/Controller';\nimport { SegmentInterface } from '../Interfaces/SegmentInterface';\n// import PropTypes from 'prop-types';\nimport './ComplexDonut.css';\n\nlet rotateAngle = 0;\n\n\nconst getTotal = values => 360; \nconst getPercent = (value, total) => value / total;\n// const sortValues = values => values.sort((a, b) => b.value - a.value);\nconst getCircumference = radius => 2 * Math.PI * radius;\nconst convertDegreesToRadians = angle => angle * (Math.PI / 180);\nconst size = 200; \n\ninterface DonutWedgeProps {\n\ti:number \n\tcircleProps:any \n\tradius:number \n\thalfSize:number \n\tsegment:any \n\tthickness:number \n\tcircumference:number\n\tgetStrokeDashOffset:any \n\ttextProps:any \n\tselectedButton?:string \n\tsetSelectedButton:(buttonLabel:string)=>void\n}\nconst DonutWedge = (props:DonutWedgeProps) => {\n\tconst {i, circleProps, radius, halfSize,segment,thickness,circumference, getStrokeDashOffset, textProps,selectedButton,setSelectedButton } = props; \n\tconst onClick = () => {\n\t\tsetSelectedButton(segment.label)\n\t\tController.createRequest(segment.arg)\n\n\t}\n\treturn <g key={i} className=\"segmentGroup\" onClick={onClick}>\n\t<circle\n\t\t{...circleProps}\n\t\tclassName=\"segmentCircle\"\n\t\tr={radius}\n\t\tcx={halfSize}\n\t\tcy={halfSize}\n\t\ttransform={segment.rotate}\n\t\tstroke={segment.color}\n\t\tstrokeWidth={(selectedButton && segment.label === selectedButton) ? thickness + 10 : thickness}\n\t\tstrokeDasharray={circumference}\n\t\tstrokeDashoffset={getStrokeDashOffset(segment.value, circumference)}\n\t/>\n\t<text\n\t\t{...textProps}\n\t\tx={segment.textCoords.x}\n\t\ty={segment.textCoords.y}\n\t\tdy=\"3px\"\n\t\ttextAnchor=\"middle\"\n\t>\n\t\t{segment.label}\n\t</text>\n</g>\n}\n\n\n\nconst ComplexDonut = (props:ComplexDonutProps) => {\n\n\tconst total = getTotal(props.segments);\n\n\tconst getTextCoordinates = (value, angleOffset) => {\n\t\tconst { radius, segments } = props;\n\t\tconst total = getTotal(segments);\n\t\tconst angle = (getPercent(value, total) * 360) / 2 + angleOffset;\n\t\tconst radians = convertDegreesToRadians(angle);\n\n\t\treturn {\n\t\t\tx: radius * Math.cos(radians) + size / 2,\n\t\t\ty: radius * Math.sin(radians) + size / 2\n\t\t};\n\t};\n\n\tconst getTransforms = () => {\n\t\tconst rotations:any[] = [];\n\t\tconst textCoords:any[] = [];\n\t\tconst { startAngle, segments } = props;\n\t\tconst total = getTotal(segments);\n\n\t\trotateAngle = startAngle;\n\n\t\tsegments.forEach(({ value }) => {\n\t\t\tconst data = rotateAngle;\n\t\t\tconst percent = getPercent(value, total);\n\t\t\tconst { x, y } = getTextCoordinates(value, rotateAngle);\n\n\t\t\trotations.push(data);\n\t\t\t\n\t\t\ttextCoords.push({ x, y });\n\n\t\t\tconst result = rotations[rotations.length - 1] || startAngle;\n\n\t\t\trotateAngle = percent * 360 + result;\n\t\t});\n\n\t\treturn { rotations, textCoords };\n\t};\n\n\tconst getStrokeDashOffset = (value, circumference) => {\n\t\tconst diff = getPercent(value, total) * circumference;\n\t\treturn circumference - diff;\n\t};\n\n\tconst [segments, setSegments] = React.useState<any>([]);\n\tconst isLoaded = true; \n\t\n\tReact.useEffect(() => {\n\t\tconst { rotations, textCoords } = getTransforms();\n\n\t\tsetSegments(\n\t\t\tprops.segments.map(({ value, color,label,arg }, i) => ({\n\t\t\t\tvalue,\n\t\t\t\tcolor,\n\t\t\t\tpercent: getPercent(value, total),\n\t\t\t\trotate: `rotate(${rotations[i]}, ${size / 2}, ${size / 2})`,\n\t\t\t\ttextCoords: textCoords[i],\n                label:label ,\n\t\t\t\targ\n\n\t\t\t}))\n\t\t);\n\n\t\t\n\t}, []);\n\n\tconst { width, radius, thickness, className, circleProps, textProps, selectedButton,  setSelectedButton } = props;\n\tconst halfSize = size / 2;\n\tconst circumference = getCircumference(radius);\n\n\tconst wrapperSize = size + 12; \n\n\n\n\treturn (\n\t\t<div className={`donut-complex${isLoaded ? ' donut-complex--loaded ' : ' '}${className}`}>\n\t\t\t<svg scale={width/size} height={width } width={width} viewBox={`-6 -6  ${wrapperSize} ${wrapperSize}`}>\n\t\t\t\t\n\t\t\t\t{segments.map((segment:any, i) => (\n\t\t\t\t<DonutWedge \n\t\t\t\t\tkey={i}\n\t\t\t\t\ti={i} \n\t\t\t\t\tcircleProps={circleProps} \n\t\t\t\t\tradius={radius}\n\t\t\t\t\thalfSize={halfSize} \n\t\t\t\t\tsegment={segment} \n\t\t\t\t\tthickness={thickness} \n\t\t\t\t\tcircumference={circumference}\n\t\t\t\t\tgetStrokeDashOffset={getStrokeDashOffset} \n\t\t\t\t\ttextProps={textProps} \n\t\t\t\t\tselectedButton={selectedButton}\n\t\t\t\t\tsetSelectedButton={setSelectedButton}\n\t\t\t\t/>\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t))}\n                \t<g key={\"Center\"}>\n\t\t\t\t\t\t<circle\n                            className=\"centerCircle\"\n\t\t\t\t\t\t\tr={radius - thickness/2}\n\t\t\t\t\t\t\tcx={halfSize}\n\t\t\t\t\t\t\tcy={halfSize}\n                            fill={\"#00000\"}\n\t\t\t\t\t\t\tz={1000}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</g>\n\t\t\t</svg>\n\t\t</div>\n\t);\n};\n\ninterface ComplexDonutProps  {\n\twidth: number,\n\tradius: number,\n\tsegments: SegmentInterface[],\n\tthickness: number,\n\tstartAngle: number,\n\tclassName: string,\n\tcircleProps: object,\n\ttextProps: object\n\tselectedButton?:string \n\tsetSelectedButton:(buttonLabel:string)=>void\n};\n\nComplexDonut.defaultProps = {\n\t// size: 160,\n\tradius: 60,\n\tsegments: [],\n\tthickness: 30,\n\tstartAngle: -90,\n\tclassName: '',\n\tcircleProps: {},\n\ttextProps: {}\n};\n\nexport { ComplexDonut };\nexport default ComplexDonut;","import React from 'react';\n\n\nimport './App.css';\nimport ComplexDonut from './ComplexDonut/ComplexDonut';\nimport { CustomValue } from './CustomValue/CustomValue';\nimport { SegmentInterface } from './Interfaces/SegmentInterface';\nimport { OffButton } from './OffButton/OffButton';\n\n\n\nenum LoadingStatus {\n  Loading = \"loading\",\n  Error = \"error\",\n  Loaded = \"loaded\"\n}\n\nfunction getWindowDimensions() {\n    const { innerWidth: width, innerHeight: height } = window;\n    return {\n      width,\n      height\n    };\n  }\n\n\n  \nfunction useWindowDimensions() {\n  const [windowDimensions, setWindowDimensions] = React.useState(getWindowDimensions());\n\n  React.useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return windowDimensions;\n}\n\n\nfunction App() {\nconst [selectedButton, setSelectedButton] = React.useState<string|undefined>(undefined)\nconst [segments, setSegments] = React.useState<SegmentInterface[]|undefined>(undefined)\nconst [loadingStatus, setLoadingStatus] = React.useState<LoadingStatus>(LoadingStatus.Loading)\nReact.useEffect(()=> {\n  fetch(\"./buttons.json\")\n  .then(r => r.json())\n  .then(segs => {\n    setSegments(segs)\n    setLoadingStatus(LoadingStatus.Loaded)\n  })\n  .catch(e => {\n    console.warn(\"Error Loading\", e);\n    setLoadingStatus(LoadingStatus.Error)\n  }) \n}, [])\n\n\nconst { width } = useWindowDimensions();\n\nif (loadingStatus === LoadingStatus.Loading) {\n  return     <div className=\"App\"></div>\n}\nif (loadingStatus === LoadingStatus.Error) {\n  return     <div className=\"App\">There was an error loading the buttons.</div>\n}\n  return (\n    <div className=\"App\">\n        <div className=\"appWrapper\">\n            <div className=\"offButtonWrapper\">\n        <OffButton \n                    width={width}\n                    selectedButton={selectedButton}\n                    setSelectedButton={setSelectedButton}\n                    />\n                    </div>\n        <ComplexDonut\n\t\twidth={width > 680 ? 700 : (width - 40)}\n\t\tradius={80}\n\t\tsegments={segments}\n\t\tthickness={40}\n\t\tstartAngle={-135}\n        selectedButton={selectedButton}\n        setSelectedButton={setSelectedButton}\n\t/>\n \n        <div className=\"customRow\">\n        <CustomValue \n                width={width}\n                selectedButton={selectedButton}\n                setSelectedButton={setSelectedButton}\n        />\n        </div>\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport { Controller } from '../Controller/Controller';\nimport \"./CustomValue.css\"\ninterface Props {\n    width:number \n\tselectedButton?:string \n\tsetSelectedButton:(buttonLabel:string)=>void\n}\ninterface CustomValueInterface {\n    r:number \n    g:number \n    b: number \n    w: number \n}\n\nexport const CustomValue = (props:Props) => {\n    const [values, setValues] = React.useState<CustomValueInterface>({r:0, g:0, b:0, w:0})\n\tconst {selectedButton,setSelectedButton,width } = props; \n    const className = (selectedButton && selectedButton === \"CUSTOM\") ? \"CustomValue selected\" : \"CustomValue\"\n    const shrinkPoint = 970;\n    let style = (width < shrinkPoint) ? {transform:\"scale(\"  + (width / shrinkPoint) + \")\"} : {}\n\n\n    const onChange = (e:any) => {\n        const {value, name } = e.target; \n        if (value >= 0 && value <= 255) {\n        let newValue = {...values} \n            newValue[name] = value; \n            setValues(newValue)  \n            setSelectedButton(\"--\")\n        }\n        \n    }\n    const setClicked = () => {\n        setSelectedButton(\"CUSTOM\") \n        Controller.createRequest(`${values.r}, ${values.g}, ${values.b}, ${values.w}`)\n    }\n\n    return <div className={className} style={style} >\n                <h3>CUSTOM</h3>\n                <div className=\"fields\">\n                <input type=\"number\" name=\"r\" value={values.r} onChange={onChange} />\n                <input type=\"number\" name=\"g\" value={values.g} onChange={onChange} />\n                <input type=\"number\" name=\"b\" value={values.b} onChange={onChange} />\n                <input type=\"number\" name=\"w\" value={values.w} onChange={onChange} />\n                </div>\n                <div onClick={setClicked} className=\"setButton\">SET</div>\n\n    </div>\n\n}","import React from 'react';\nimport { Controller } from '../Controller/Controller';\nimport \"./OffButton.css\"\ninterface Props {\n    width:number \n\tselectedButton?:string \n\tsetSelectedButton:(buttonLabel:string)=>void\n}\nexport const OffButton = (props:Props) => {\n\tconst {selectedButton,setSelectedButton,width } = props; \n    const className = (selectedButton && selectedButton === \"OFF\") ? \"OffButton selected\" : \"OffButton\"\n    const shrinkPoint = 970;\n    let style = (width < shrinkPoint) ? {transform:\"scale(\"  + (width / shrinkPoint) + \")\"} : {}\n\n    return <div className={className} style={style} onClick={()=> {\n        \n        setSelectedButton(\"OFF\")\n        Controller.createRequest(\"0,0,0,0\")\n        }}>\n                <div className=\"innerCircle\">\n                    OFF\n                </div>\n    </div>\n\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}