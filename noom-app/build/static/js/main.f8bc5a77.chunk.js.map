{"version":3,"sources":["Controller/Controller.ts","ComplexDonut/ComplexDonut.tsx","App.tsx","CustomValue/CustomValue.tsx","SliderContainer/SliderContainer.tsx","reportWebVitals.ts","index.tsx"],"names":["Controller","arg","obj","formBody","property","encodedKey","encodeURIComponent","encodedValue","push","join","fetch","method","headers","body","then","r","console","log","catch","e","warn","whiteBrightness","rotateAngle","getPercent","value","total","size","DonutWedge","props","i","circleProps","radius","halfSize","segment","thickness","circumference","getStrokeDashOffset","textProps","selectedButton","setSelectedButton","onClick","useCallback","label","createRequest","className","cx","cy","transform","rotate","stroke","color","strokeWidth","strokeDasharray","strokeDashoffset","x","textCoords","y","dy","textAnchor","ComplexDonut","segments","getTextCoordinates","angleOffset","radians","angle","Math","PI","convertDegreesToRadians","textRadius","cos","sin","React","useState","setSegments","useEffect","rotations","startAngle","forEach","data","percent","result","length","getTransforms","map","width","getCircumference","offX","scale","height","viewBox","wrapperSize","fill","z","defaultProps","LoadingStatus","CustomValue","g","b","w","values","setValues","style","onChange","target","name","newValue","type","SliderContainer","setWhiteBrightness","top","vertical","min","max","marks","step","included","defaultValue","onAfterChange","getWindowDimensions","window","innerWidth","innerHeight","App","undefined","Loading","loadingStatus","setLoadingStatus","json","segs","Loaded","Error","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener","useWindowDimensions","computedWidth","maxWidth","padding","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f8bc5a77.chunk.js","sourcesContent":["export class Controller {\n    static whiteBrightness = 128;\n\n    static createRequest(arg) {\n      let obj = {\"arg\":arg}\n      var formBody:any = [];\n      for (var property in obj) {\n        var encodedKey = encodeURIComponent(property);\n        var encodedValue = encodeURIComponent(obj[property]);\n        formBody.push(encodedKey + \"=\" + encodedValue);\n      }\n      formBody = formBody.join(\"&\");\n      // console.log(\"About to send\", formBody,obj);\n      // return; \n\n      fetch(\"https://api.particle.io/v1/devices/e00fce68873438d598031f19/led?access_token=837a518263b45941c837a9e45f82835107cc5948\", \n        {\n            method:\"POST\",   \n            headers: {\n            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'\n        }, body:formBody})\n          .then(r => console.log(\"Updated\", r) )\n          .catch(e => { console.warn(\"Error Updating\", e);\n          })\n        }\n}","import React, { useCallback } from 'react';\nimport { Controller } from '../Controller/Controller';\nimport { SegmentInterface } from '../Interfaces/SegmentInterface';\n// import PropTypes from 'prop-types';\nimport './ComplexDonut.css';\n\nlet rotateAngle = 0;\n\n\nconst getTotal = values => 360; \nconst getPercent = (value, total) => value / total;\n// const sortValues = values => values.sort((a, b) => b.value - a.value);\nconst getCircumference = radius => 2 * Math.PI * radius;\nconst convertDegreesToRadians = angle => angle * (Math.PI / 180);\nconst size = 200; \n\ninterface DonutWedgeProps {\n\ti:number \n\tcircleProps:any \n\tradius:number \n\thalfSize:number \n\tsegment:any \n\tthickness:number \n\tcircumference:number\n\tgetStrokeDashOffset:any \n\ttextProps:any \n\tselectedButton?:string \n\twhiteBrightness: number\n\n\tsetSelectedButton:(buttonLabel:string)=>void\n}\nconst DonutWedge = (props:DonutWedgeProps) => {\n\tconst {i, circleProps, radius, halfSize,segment,thickness,circumference, getStrokeDashOffset, textProps,selectedButton,setSelectedButton , whiteBrightness} = props; \n\tconst onClick = useCallback( () => {\n\t\tsetSelectedButton(segment.label)\n\t\tif (segment.label === \"WHITE\") {\n\t\t\tconst arg  = `0,0,0,${whiteBrightness}`\n\t\t\tController.createRequest(arg)\n\n\t\t} else {\n\t\t\tController.createRequest(segment.arg)\n\n\t\t}\n\n\t}, [segment.arg, segment.label, setSelectedButton, whiteBrightness]) \n\t\n\treturn <g key={i} className=\"segmentGroup\" onClick={onClick}>\n\t<circle\n\t\t{...circleProps}\n\t\tclassName=\"segmentCircle\"\n\t\tr={radius}\n\t\tcx={halfSize}\n\t\tcy={halfSize}\n\t\ttransform={segment.rotate}\n\t\tstroke={segment.color}\n\t\tstrokeWidth={(selectedButton && segment.label === selectedButton) ? thickness + 10 : thickness}\n\t\tstrokeDasharray={circumference}\n\t\tstrokeDashoffset={getStrokeDashOffset(segment.value, circumference)}\n\t/>\n\t<text\n\t\t{...textProps}\n\t\tx={segment.textCoords.x}\n\t\ty={segment.textCoords.y}\n\t\tdy=\"3px\"\n\t\ttextAnchor=\"middle\"\n\t>\n\t\t{segment.label}\n\t</text>\n</g>\n}\n\n\n\nconst ComplexDonut = (props:ComplexDonutProps) => {\n\n\tconst total = getTotal(props.segments);\n\n\tconst getTextCoordinates = (value, angleOffset) => {\n\t\tconst { radius, segments } = props;\n\t\t\n\t\tconst total = getTotal(segments);\n\t\tconst angle = (getPercent(value, total) * 360) / 2 + angleOffset;\n\t\tconst radians = convertDegreesToRadians(angle);\n\t\tconst textRadius = radius * 1.03;\n\t\treturn {\n\t\t\tx: textRadius * Math.cos(radians) + size / 2,\n\t\t\ty: textRadius * Math.sin(radians) + size / 2\n\t\t};\n\t};\n\n\tconst getTransforms = () => {\n\t\tconst rotations:any[] = [];\n\t\tconst textCoords:any[] = [];\n\t\tconst { startAngle, segments } = props;\n\t\tconst total = getTotal(segments);\n\n\t\trotateAngle = startAngle;\n\n\t\tsegments.forEach(({ value }) => {\n\t\t\tconst data = rotateAngle;\n\t\t\tconst percent = getPercent(value, total);\n\t\t\tconst { x, y } = getTextCoordinates(value, rotateAngle);\n\n\t\t\trotations.push(data);\n\t\t\t\n\t\t\ttextCoords.push({ x, y });\n\n\t\t\tconst result = rotations[rotations.length - 1] || startAngle;\n\n\t\t\trotateAngle = percent * 360 + result;\n\t\t});\n\n\t\treturn { rotations, textCoords };\n\t};\n\n\tconst getStrokeDashOffset = (value, circumference) => {\n\t\tconst diff = getPercent(value, total) * circumference;\n\t\treturn circumference - diff;\n\t};\n\n\tconst [segments, setSegments] = React.useState<any>([]);\n\tconst isLoaded = true; \n\t\n\tReact.useEffect(() => {\n\t\tconst { rotations, textCoords } = getTransforms();\n\n\t\tsetSegments(\n\t\t\tprops.segments.map(({ value, color,label,arg }, i) => ({\n\t\t\t\tvalue,\n\t\t\t\tcolor,\n\t\t\t\tpercent: getPercent(value, total),\n\t\t\t\trotate: `rotate(${rotations[i]}, ${size / 2}, ${size / 2})`,\n\t\t\t\ttextCoords: textCoords[i],\n                label:label ,\n\t\t\t\targ\n\n\t\t\t}))\n\t\t);\n\n\t\t\n\t}, []);\n\n\tconst { width, radius, thickness, className, circleProps, textProps, selectedButton,  setSelectedButton } = props;\n\tconst halfSize = size / 2;\n\tconst circumference = getCircumference(radius);\n\n\tconst wrapperSize = size + 12; \n\n\tconst offX = size * 1.09;\n\tconst offY =  0 - (size * 0.09)\n\n\n\tconst offClicked = () => {\n\t\tsetSelectedButton(\"OFF\")\n        Controller.createRequest(\"0,0,0,0\")\n\n\t}\n\n\treturn (\n\t\t<div className={`donut-complex${isLoaded ? ' donut-complex--loaded ' : ' '}${className}`}>\n\t\t\t<svg scale={width/size} height={width } width={width} viewBox={`-6 -30  ${wrapperSize * 1.3} ${wrapperSize}`}>\n\t\t\t\t\n\t\t\t\t{segments.map((segment:any, i) => (\n\t\t\t\t<DonutWedge \n\t\t\t\t\tkey={i}\n\t\t\t\t\ti={i} \n\t\t\t\t\tcircleProps={circleProps} \n\t\t\t\t\tradius={radius}\n\t\t\t\t\thalfSize={halfSize} \n\t\t\t\t\tsegment={segment} \n\t\t\t\t\tthickness={thickness} \n\t\t\t\t\tcircumference={circumference}\n\t\t\t\t\tgetStrokeDashOffset={getStrokeDashOffset} \n\t\t\t\t\ttextProps={textProps} \n\t\t\t\t\tselectedButton={selectedButton}\n\t\t\t\t\twhiteBrightness={props.whiteBrightness}\n\t\t\t\t\tsetSelectedButton={setSelectedButton}\n\t\t\t\t/>\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t))}\n                \t<g key={\"Center\"}>\n\t\t\t\t\t\t<circle\n                            className=\"centerCircle\"\n\t\t\t\t\t\t\tr={radius * 0.84}\n\t\t\t\t\t\t\tcx={halfSize}\n\t\t\t\t\t\t\tcy={halfSize}\n                            fill={\"#efefef\"}\n\t\t\t\t\t\t\tz={1000}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</g>\n\n\n\t\t\t\t\t<g key={\"OffButton\"} className=\"offButtonWrapper\" onClick={offClicked}>\n\t\t\t\t\t\t<circle\n                            className=\"OffButton\"\n\t\t\t\t\t\t\tr={radius * 0.55}\n\t\t\t\t\t\t\tcx={offX}\n\t\t\t\t\t\t\tcy={ offY}\n                            fill={\"#FFF\"}\n\t\t\t\t\t\t\tz={1000}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<circle\n                            className=\"OffButtonInner\"\n\t\t\t\t\t\t\tr={radius * 0.21}\n\t\t\t\t\t\t\tcx={offX}\n\t\t\t\t\t\t\tcy={offY}\n                            fill={\"#000\"}\n\t\t\t\t\t\t\tz={1000}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<text\n\t\t\t\t\t\t\t\tx={offX}\n\t\t\t\t\t\t\t\ty={offY}\n\t\t\t\t\t\t\tdy=\"3px\"\n\t\t\t\t\t\t\tclassName=\"whiteText\"\n\t\t\t\t\t\t\ttextAnchor=\"middle\"\n\t\t\t\t\t\t>OFF</text>\n\t\t\t\t\t</g>\n\t\t\t</svg>\n\t\t</div>\n\t);\n};\n\ninterface ComplexDonutProps  {\n\twidth: number,\n\tradius: number,\n\tsegments: SegmentInterface[],\n\tthickness: number,\n\tstartAngle: number,\n\tclassName: string,\n\tcircleProps: object,\n\ttextProps: object\n\twhiteBrightness: number\n\n\tselectedButton?:string \n\tsetSelectedButton:(buttonLabel:string)=>void\n};\n\nComplexDonut.defaultProps = {\n\t// size: 160,\n\tradius: 60,\n\tsegments: [],\n\tthickness: 30,\n\tstartAngle: -90,\n\tclassName: '',\n\tcircleProps: {},\n\ttextProps: {}\n};\n\nexport { ComplexDonut };\nexport default ComplexDonut;","import Slider from 'rc-slider/lib/Slider';\nimport React from 'react';\n\n\nimport './App.css';\nimport ComplexDonut from './ComplexDonut/ComplexDonut';\nimport { CustomValue } from './CustomValue/CustomValue';\nimport { SegmentInterface } from './Interfaces/SegmentInterface';\nimport {SliderContainer} from './SliderContainer/SliderContainer';\n// import { OffButton } from './OffButton/OffButton';\n\n\n\nenum LoadingStatus {\n  Loading = \"loading\",\n  Error = \"error\",\n  Loaded = \"loaded\"\n}\n\nfunction getWindowDimensions() {\n    const { innerWidth: width, innerHeight: height } = window;\n    return {\n      width,\n      height\n    };\n  }\n\n\n  \nfunction useWindowDimensions() {\n  const [windowDimensions, setWindowDimensions] = React.useState(getWindowDimensions());\n\n  React.useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return windowDimensions;\n}\n\n\nfunction App() {\nconst [selectedButton, setSelectedButton] = React.useState<string|undefined>(undefined)\nconst [segments, setSegments] = React.useState<SegmentInterface[]|undefined>(undefined)\nconst [loadingStatus, setLoadingStatus] = React.useState<LoadingStatus>(LoadingStatus.Loading)\n\nconst [whiteBrightness, setWhiteBrightness] = React.useState(255)\n\nReact.useEffect(()=> {\n  fetch(\"./buttons.json\")\n  .then(r => r.json())\n  .then(segs => {\n    setSegments(segs)\n    setLoadingStatus(LoadingStatus.Loaded)\n  })\n  .catch(e => {\n    console.warn(\"Error Loading\", e);\n    setLoadingStatus(LoadingStatus.Error)\n  }) \n}, [])\n\n\nconst { width } = useWindowDimensions();\n\nif (loadingStatus === LoadingStatus.Loading) {\n  return     <div className=\"App\"></div>\n}\nif (loadingStatus === LoadingStatus.Error) {\n  return     <div className=\"App\">There was an error loading the buttons.</div>\n}\n\nconst padding = 20;\nconst maxWidth = 900;\n\nconst computedWidth = width > maxWidth-padding ? maxWidth : (width - (padding*2))\n\n\n  return (\n    <div className=\"App\">\n        <div className=\"appWrapper\">\n            {/* <div className=\"offButtonWrapper\" style={{width:computedWidth+\"px\", height:computedWidth/4+\"px\"}}>\n        <OffButton \n                    width={computedWidth/4}\n                    selectedButton={selectedButton}\n                    setSelectedButton={setSelectedButton}\n                    />\n                    </div> */}\n        <ComplexDonut\n\t\twidth={computedWidth}\n\t\tradius={80}\n\t\tsegments={segments}\n\t\tthickness={40}\n\t\tstartAngle={-135}\n        selectedButton={selectedButton}\n        setSelectedButton={setSelectedButton}\n        whiteBrightness={whiteBrightness}\n\t/>\n \n        <div className=\"customRow\">\n        <CustomValue \n                width={width}\n                selectedButton={selectedButton}\n                setSelectedButton={setSelectedButton}\n        />\n        </div>\n                  <SliderContainer width={computedWidth}\n whiteBrightness={whiteBrightness} setWhiteBrightness={setWhiteBrightness} selectedButton={selectedButton}/>\n\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport { Controller } from '../Controller/Controller';\nimport \"./CustomValue.css\"\ninterface Props {\n    width:number \n\tselectedButton?:string \n\tsetSelectedButton:(buttonLabel:string)=>void\n}\ninterface CustomValueInterface {\n    r:number \n    g:number \n    b: number \n    w: number \n}\n\nexport const CustomValue = (props:Props) => {\n    const [values, setValues] = React.useState<CustomValueInterface>({r:0, g:0, b:0, w:0})\n\tconst {selectedButton,setSelectedButton,width } = props; \n    const className = (selectedButton && selectedButton === \"CUSTOM\") ? \"CustomValue selected\" : \"CustomValue\"\n    const shrinkPoint = 970;\n    let style = (width < shrinkPoint) ? {transform:\"scale(\"  + (width / shrinkPoint) + \")\"} : {}\n\n\n    const onChange = (e:any) => {\n        const {value, name } = e.target; \n        if (value >= 0 && value <= 255) {\n        let newValue = {...values} \n            newValue[name] = value; \n            setValues(newValue)  \n            setSelectedButton(\"--\")\n        }\n        \n    }\n    const setClicked = () => {\n        setSelectedButton(\"CUSTOM\") \n        Controller.createRequest(`${values.r},${values.g},${values.b},${values.w}`)\n    }\n\n    return <div className={className} style={style} >\n                <h3>CUSTOM</h3>\n                <div className=\"fields\">\n                <input type=\"number\" name=\"r\" value={values.r} onChange={onChange} />\n                <input type=\"number\" name=\"g\" value={values.g} onChange={onChange} />\n                <input type=\"number\" name=\"b\" value={values.b} onChange={onChange} />\n                <input type=\"number\" name=\"w\" value={values.w} onChange={onChange} />\n                </div>\n                <div onClick={setClicked} className=\"setButton\">SET</div>\n\n    </div>\n\n}","import Slider from \"rc-slider/lib/Slider\"\nimport 'rc-slider/assets/index.css';\nimport { Controller } from \"../Controller/Controller\";\n\ninterface SliderContrainerProps {\n    width: number;\n    whiteBrightness: number\n\tselectedButton?:string \n    setWhiteBrightness: (value: number) => void\n}\nexport const SliderContainer = (props:SliderContrainerProps) => {\n    const {width, whiteBrightness,selectedButton,setWhiteBrightness} = props\n    const onChange = (value:number) => {\n        setWhiteBrightness(value)\n        if (selectedButton === \"WHITE\") {\n            const arg  = `0,0,0,${whiteBrightness}`\n\t\t\tController.createRequest(arg)\n\n        }\n    }\n\n    const top = width > 500 ? \"380px\" : \"180px\"\n\n    return <div className=\"sliderContainer\" style={{top:top}} > \n    <Slider \n        vertical \n        min={0} \n        max={255} \n        marks={[]} \n        step={1} \n        included={false} \n        defaultValue={255} \n        value={whiteBrightness}\n        onChange={onChange}\n        onAfterChange={onChange}\n        />\n        <span>White Brightness</span>\n    </div>\n\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}